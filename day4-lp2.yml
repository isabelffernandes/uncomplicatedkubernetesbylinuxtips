apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: nginx-deployment-v2
  name: nginx-deployment-v2
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx-deployment-v2
  strategy: {}
  template:
    metadata:
      labels:
        app: nginx-deployment-v2
    spec:
      containers:
      - image: nginx:1.19.2
        name: nginxv2
        # args:
        # - /bin/sh
        # - -c
        # - touch /tmp/healthy; sleep 30; rm -f /tmp/healthy; sleep 600
        resources:
          limits:
            cpu: "0.5"
            memory: 256Mi
          requests:
            cpu: 0.25
            memory: 128Mi
        livenessProbe: # Aqui é onde vamos adicionar a nossa livenessProbe
          httpGet: # Aqui vamos utilizar o httpGet, onde vamos se conectar ao container através do protocolo HTTP
            path: / # Qual o endpoint que vamos utilizar para se conectar ao container
            port: 80 # Qual porta TCP vamos utilizar para se conectar ao container
          initialDelaySeconds: 10 # Quantos segundos vamos esperar para executar a primeira verificação
          periodSeconds: 10 # A cada quantos segundos vamos executar a verificação
          timeoutSeconds: 5 # Quantos segundos vamos esperar para considerar que a verificação falhou
          failureThreshold: 3 # Quantos falhas consecutivas vamos aceitar antes de reiniciar o container
          

# apiVersion: v1
# kind: Pod
# metadata:
#   labels:
#     test: liveness
#   name: liveness-exec
# spec:
#   containers:
#   - name: liveness
#     image: registry.k8s.io/busybox:1.27.2
#     args:
#     - /bin/sh
#     - -c
#     - touch /tmp/healthy; sleep 30; rm -f /tmp/healthy; sleep 600
#     livenessProbe:
#       exec:
#         command:
#         - cat
#         - /tmp/healthy
#       initialDelaySeconds: 5
#       periodSeconds: 5
